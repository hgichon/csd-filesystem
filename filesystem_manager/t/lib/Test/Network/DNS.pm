package Test::Network::DNS;

use v5.14;

use strict;
use warnings;
use utf8;

our $AUTHORITY = 'cpan:gluesys';

use Test::Class::Moose extends => 'Test::GMS';

use Sys::Hostname::FQDN qw/short/;

has 'namespace' => (
    is      => 'ro',
    isa     => 'Str',
    default => 'Mock::Controller',
);

has 'cntlr' => (
    is      => 'ro',
    isa     => 'Str',
    default => 'Network',
);

has 'scope' => (
    is      => 'ro',
    isa     => 'Str',
    default => sub { short(); },
);

has 'resolv_file' => (
    is      => 'ro',
    isa     => 'Str',
    default => '/tmp/etc/resolv.conf',
);

has 'uris' => (
    is         => 'ro',
    isa        => 'ArrayRef',
    auto_deref => 1,
    lazy       => 1,
    default    => sub
    {
        my $self = shift;

        [
            {
                namespace => $self->namespace,
                cntlr     => $self->cntlr,
                action    => 'dns_info',
                uri       => '/api/network/dns/info',
            },
            {
                namespace => $self->namespace,
                cntlr     => $self->cntlr,
                action    => 'dns_update',
                uri       => '/api/network/dns/update',
            },
            {
                namespace => $self->namespace,
                cntlr     => $self->cntlr,
                action    => 'dns_reload',
                uri       => '/api/network/dns/reload',
            },
        ];
    }
);

sub test_startup
{
    my $self = shift;

    $self->next::method(@_);

    my $t = $self->t;

    foreach my $uri ($self->uris)
    {
        $t->app->routes->post($uri->{uri})->to(
            namespace  => $uri->{namespace},
            controller => $uri->{cntlr},
            action     => $uri->{action},
        );
    }
}

sub test_setup
{
    my $self = shift;

    my $file        = $self->resolv_file;
    my $mock_resolv = <<"ENDL";
# Generated by NetworkManager
nameserver 8.8.8.8
nameserver 9.9.9.9
ENDL

    open(my $fh, '>', $file)
        || die "Failed to open: $file: $!";

    print $fh $mock_resolv;

    close($fh);

    $self->mock_data(
        data => {
            "/${\$self->scope}/Network/DNS/8.8.8.8/IPAddr" => '8.8.8.8',
            "/${\$self->scope}/Network/DNS/9.9.9.9/IPAddr" => '9.9.9.9',
        }
    );
}

sub test_shutdown
{
    my $self = shift;

    $self->unmock_data();
    unlink($self->resolv_file);
}

sub test_dns_info : Test(no_plan)
{
    my $self = shift;

    my $t = $self->t->post_ok('/api/network/dns/info');

    $t->status_is(200)->json_is('/success' => 1)
        ->json_like('/msg' => qr/DNS config is retrieved/)
        ->json_is('/statuses/0/code' => 'NETWORK_DNS_INFO_OK')
        ->json_is('/entity/0/IPAddr' => '8.8.8.8')
        ->json_is('/entity/1/IPAddr' => '9.9.9.9');

    explain(`cat ${\$self->resolv_file}`);

#    explain($self->mock_data());
}

sub test_dns_update : Test(no_plan)
{
    my $self = shift;

    my $t = $self->t->post_ok('/api/network/dns/update',
        json => ['192.168.0.1'],);

    $t->status_is(200)->json_is('/success' => 1)
        ->json_like('/msg' => qr/DNS config is updated/)
        ->json_is('/statuses/0/code' => 'NETWORK_DNS_UPDATE_OK')
        ->json_is('/entity/0/IPAddr' => '192.168.0.1');

    explain(`cat /tmp/etc/resolv.conf`);

#    explain($self->mock_data());

    $t = $self->t->post_ok('/api/network/dns/update',
        json => ['8.8.8.8', '9.9.9.9'],);

    $t->status_is(200)->json_is('/success' => 1)
        ->json_like('/msg' => qr/DNS config is updated/)
        ->json_is('/statuses/0/code' => 'NETWORK_DNS_UPDATE_OK')
        ->json_is('/entity/0/IPAddr' => '8.8.8.8')
        ->json_is('/entity/1/IPAddr' => '9.9.9.9');

    explain(`cat /tmp/etc/resolv.conf`);

#    explain($self->mock_data());
}

#sub test_dns_reload : Test(no_plan)
#{
#    my $self = shift;
#
#    my $t = $self->t->post_ok('/api/network/dns/reload');
#
#    $t->status_is(200)
#        ->json_is('/success'         => 1)
#        ->json_like('/msg'           => qr/DNS config is reloaded/)
#        ->json_is('/statuses/0/code' => 'NETWORK_DNS_RELOAD_OK');
#
#    explain($t->tx->res->json) unless ($t->success);
#}

1;

=encoding utf8

=head1 NAME

Test::Network::DNS - 

=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 COPYRIGHT AND LICENSE

Copyright 2015-2021. Gluesys Co., Ltd. All rights reserved.

=head1 SEE ALSO

=cut

