#!/usr/bin/env perl

use v5.14;

use v5.14;

use strict;
use warnings;
use utf8;

BEGIN
{
    use File::Basename qw/dirname/;
    use File::Spec;
    use File::Spec::Functions qw/rel2abs/;

    (my $ROOTDIR = dirname(rel2abs(__FILE__))) =~ s/gms\/.+$/gms/;

    unshift(@INC, "$ROOTDIR/libgms", "$ROOTDIR/lib", '/usr/girasole/lib');
}

use Env;
use Data::Dumper;
use GMS::Cluster::MDSAdapter;
use GMS::Common::IPC;
use Sys::Syslog;
use Sys::Hostname::FQDN qw(short);
use File::Slurp qw(read_file);

use constant {
    DEFAULT_THRESHOLD => 80,
    LVM_CONF_PATH     => "/etc/lvm/lvm.conf",
};

exit 0 if (!@ARGV || @ARGV != 1);

my ($vgname, $lvname) = split(/\//, $ARGV[0], 2)

    my $data_alloc = to_int($ENV{DMEVENTD_THIN_POOL_DATA});
my $meta_alloc = to_int($ENV{DMEVENTD_THIN_POOL_METADATA});

my $thresold = get_autoextending_thresold();

syslogger(
    'info',
    sprintf(
        'thin pool autoextending trigger. (name: %s/%s, data: %s, meta: %s)',
        $vgname,
        $lvname,
        $data_alloc,
        $meta_alloc
    )
);

if ($data_alloc >= $thresold || $meta_alloc >= $thresold)
{
    my $lvcli = thin_pool_extend();

    my $adp    = GMS::Cluster::MDSAdapter->new();
    my $master = $adp->get_girasole_master();

    my $level = ($lvcli->{status} != 0) ? 'error' : 'info';

    my @event_parms = (
        "event",
        "create",
        "--level=$level",
        "--from=${\short()}",
        "--facility=\'$vgname/$lvname\'",
        "--code=THIN_POOL_LV_EXTEND",
        "--msg=\'$lvcli->{msg}\'",
        "--details=output=\'$lvcli->{output}\'",
    );

    my $res = GMS::Common::IPC::exec(
        cmd  => '/usr/bin/eflowdctl',
        args => \@event_parms,
    );

    if (!defined $res || $res->{status})
    {
        syslogger(
            "err",
            "failed to create thin pool autoextending event. ($vgname/$lvname)"
        );
    }

    if ($lvcli->{status})
    {
        exit 1;
    }
}

exit 0;

sub thin_pool_extend
{
    my $ret = {
        status => -1,
        msg    => "$vgname/$lvname autoextending fail.",
        output => "unexpected error.",
    };

    my $res = GMS::Common::IPC::exec(
        cmd  => '/usr/sbin/lvextend',
        args => ['--usepolicies', "$vgname/$lvname"],
    );

    if (!defined $res || $res->{status})
    {
        $ret->{status} = 1;
        $ret->{output} = trim($res->{err});
    }
    else
    {
        $ret->{status} = 0;
        $ret->{msg}    = "$vgname/$lvname autoextending success.";
        $ret->{output} = trim($res->{out});
    }

    syslogger(($ret->{status}) ? 'err' : 'info',
        "$ret->{msg} $ret->{output}");

    return $ret;
}

sub get_autoextending_thresold
{
    if (-e LVM_CONF_PATH && -f LVM_CONF_PATH)
    {
        my $tmp   = read_file(LVM_CONF_PATH);
        my @lines = split(/\n/, $tmp);

        foreach my $l (@lines)
        {
            $l = trim($l);

            if ($l
                =~ /^thin_pool_autoextend_threshold\s*=\s*(?<percent>\d+)$/)
            {
                my $value = $+{percent};

                if (defined($value) && $value ne '')
                {
                    syslogger('info',
                        "thin_pool_autoextend_threshold = $value");
                    return int($value);
                }
            }
        }
    }

    return DEFAULT_THRESHOLD;
}

sub syslogger
{
    my $level = shift;
    my $msg   = shift;

    if (!defined($level) || $level eq '')
    {
        $level = 'info';
    }

    $level = lc($level);

    if ($level eq 'error')
    {
        $level = 'err';
    }

    syslog($level, $msg);
}

sub trim
{
    my $s = shift;
    $s =~ s/^\s+|\s+$|\n//g;

    return $s;
}

sub to_int
{
    my $val = shift;

    return !defined($val) ? 0 : int($val);
}
